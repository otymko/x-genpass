конст ИМЯ_ПРИЛОЖЕНИЯ = "x-genpass"
конст ВЕРСИЯ_ПРИЛОЖЕНИЯ = Версия{0.1}
конст ОПИСАНИЕ_ПРИЛОЖЕНИЯ = "Простой генератор паролей на `1С: Исполнитель`"

конст СЛУЖЕБНОЕ_X_EMPTY_ARGS = "X_EMPTY_ARGS"

конст ДЛИНА_ПАРОЛЯ_ПО_УМОЛЧАНИЮ = 32

конст АЛФАВИТ_ВЕРХНИЙ_РЕГИСТР = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
конст АЛФАВИТ_НИЖНИЙ_РЕГИСТР = "abcdefghijklmnopqrstuvwxyz"
конст АЛФАВИТ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ = ":<=>?@;[\\]^_`"
конст АЛФАВИТ_ЦИФРЫ = "0123456789"

структура КонтекстСкрипта
    пер Флаги: Массив<Строка>
    пер Аргументы: Массив<Строка>
    пер НастройкиГенерации: НастройкаГенерацииПароля

    пер ДоступныеФлагиПриложения: Соответствие<ФлагиПриложения, ОписаниеФлагаПриложения>

    пер ВывестиСправку: Булево = Ложь
    пер ВывестиВерсию: Булево = Ложь

    конструктор()
;

перечисление ФлагиПриложения
    ВЕРСИЯ,
    СПРАВКА,
    ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР,
    ВКЛЮЧАТЬ_ЦИФРЫ,
    ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ
;

структура ОписаниеФлагаПриложения
    знч Ид: ФлагиПриложения
    знч Имя: Строка
    знч КраткоеИмя: Строка
    знч Описание: Строка
;

структура НастройкаГенерацииПароля
    пер ДлинаПароля: Число
    пер НижнийРегистр: Булево = Ложь  
    пер СпециальныеСимволы: Булево = Ложь
    пер Цифры: Булево = Ложь

    конструктор()
;

исключение ОшибкаРазбораАргументовКоманднойСтроки
;

метод Скрипт(ПараметрыКоманднойСтроки: Массив<Строка>)

    пер Контекст: КонтекстСкрипта?
    попытка
        Контекст = ИнициализироватьКонтекстСкрипта(ПараметрыКоманднойСтроки)
    поймать Е: ОшибкаРазбораАргументовКоманднойСтроки
        Консоль.Записать("ОШИБКА: " + Е.Описание)
        Скрипт.ЗавершитьРаботу(1)
    поймать Е: Исключение
        Консоль.Записать("ОШИБКА: " + "Неизвестная ошибка приложения")
        Скрипт.ЗавершитьРаботу(1)    
    ;

    ЗапуститьПриложение(Контекст!)
;

метод ИнициализироватьКонтекстСкрипта(ПараметрыКоманднойСтроки: Массив<Строка>): КонтекстСкрипта
    пер Контекст = новый КонтекстСкрипта()

    если ПараметрыКоманднойСтроки.Найти(СЛУЖЕБНОЕ_X_EMPTY_ARGS) != Неопределено
        ПараметрыКоманднойСтроки.Удалить(СЛУЖЕБНОЕ_X_EMPTY_ARGS)
    ;

    для ПараметрКоманднойСтроки из ПараметрыКоманднойСтроки
        если ПараметрКоманднойСтроки.НачинаетсяС("-")
            Контекст.Флаги.Добавить(ПараметрКоманднойСтроки)
        иначе
            Контекст.Аргументы.Добавить(ПараметрКоманднойСтроки)
        ;
    ;

    если Контекст.Аргументы.Размер() > 1 
        выбросить новый ОшибкаРазбораАргументовКоманднойСтроки(
            "Передано больше 1 аргумента командой строки.")
    ;

    ЗаполнитьВозможныеФлагиПриложения(Контекст)
    ПроверитьФлагиНаСуществование(Контекст)

    если Контекст.Аргументы.Пусто()
        Контекст.НастройкиГенерации.ДлинаПароля = ДЛИНА_ПАРОЛЯ_ПО_УМОЛЧАНИЮ
    иначе
        пер ДлинаПароля: Число
        попытка 
            ДлинаПароля = новый Число(Контекст.Аргументы[0])
        поймать Исключение: Исключение
            выбросить новый ОшибкаРазбораАргументовКоманднойСтроки(Исключение.Описание)
        ;
        Контекст.НастройкиГенерации.ДлинаПароля = ДлинаПароля
    ;

    Контекст.ВывестиВерсию = ФлагУстановлен(
        Контекст.Флаги, Контекст.ДоступныеФлагиПриложения[ФлагиПриложения.ВЕРСИЯ])
    Контекст.ВывестиСправку = ФлагУстановлен(
        Контекст.Флаги, Контекст.ДоступныеФлагиПриложения[ФлагиПриложения.СПРАВКА])

    Контекст.НастройкиГенерации.НижнийРегистр = ФлагУстановлен(
        Контекст.Флаги, Контекст.ДоступныеФлагиПриложения[ФлагиПриложения.ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР])

    Контекст.НастройкиГенерации.СпециальныеСимволы = ФлагУстановлен(
        Контекст.Флаги, Контекст.ДоступныеФлагиПриложения[ФлагиПриложения.ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ])

    Контекст.НастройкиГенерации.Цифры = ФлагУстановлен(
        Контекст.Флаги, Контекст.ДоступныеФлагиПриложения[ФлагиПриложения.ВКЛЮЧАТЬ_ЦИФРЫ])

    возврат Контекст
;

метод ЗапуститьПриложение(Контекст: КонтекстСкрипта)
    если Контекст.ВывестиСправку
        ВывестиВКонсольСправку(Контекст)
        
        возврат
    ;

    если Контекст.ВывестиВерсию
        Консоль.Записать(ВЕРСИЯ_ПРИЛОЖЕНИЯ)
        возврат
    ;

    знч СгенерированныйПароль = СгенерироватьПароль(Контекст.НастройкиГенерации)
    Консоль.Записать(СгенерированныйПароль)
;

метод СгенерироватьПароль(Настройки: НастройкаГенерацииПароля): Строка
    пер Результат = ""
    знч Алфавит = АлфавитПоНастройкам(Настройки)
    знч ДлинаАлфавита = Алфавит.Длина()

    знч СлучайныйГенератор = новый СлучайныйГенератор()
    пока Результат.Длина() < Настройки.ДлинаПароля
        знч СлучайноеЧисло = СлучайныйГенератор.СлучайноеЦелое(0, ДлинаАлфавита)
        Результат += Алфавит.Подстрока(СлучайноеЧисло, СлучайноеЧисло + 1)
    ;

    возврат Результат
;

метод АлфавитПоНастройкам(Настройки: НастройкаГенерацииПароля): Строка
    пер Алфавит = АЛФАВИТ_ВЕРХНИЙ_РЕГИСТР

    если Настройки.НижнийРегистр
        Алфавит += АЛФАВИТ_НИЖНИЙ_РЕГИСТР
    ;
    
    если Настройки.Цифры
        Алфавит += АЛФАВИТ_ЦИФРЫ
    ;

    если Настройки.СпециальныеСимволы
        Алфавит += АЛФАВИТ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ
    ;

    возврат Алфавит
;

конст ФЛАГ_СПРАВКА = "h"
конст ФЛАГ_СПРАВКА_ПОЛНАЯ = "help"

конст ФЛАГ_ВЕРСИЯ = "v"
конст ФЛАГ_ВЕРСИЯ_ПОЛНАЯ = "version"

конст ФЛАГ_ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР = "l"
конст ФЛАГ_ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР_ПОЛНАЯ = "include-lowercase"

конст ФЛАГ_ВКЛЮЧАТЬ_ЦИФРЫ = "n"
конст ФЛАГ_ВКЛЮЧАТЬ_ЦИФРЫ_ПОЛНАЯ = "include-numeric"

конст ФЛАГ_ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ = "s"
конст ФЛАГ_ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ_ПОЛНАЯ = "include-special"

метод ЗаполнитьВозможныеФлагиПриложения(Контекст: КонтекстСкрипта)
    знч ФлагВерсия = новый ОписаниеФлагаПриложения(
        ФлагиПриложения.ВЕРСИЯ, 
        ФЛАГ_ВЕРСИЯ_ПОЛНАЯ, 
        ФЛАГ_ВЕРСИЯ, 
        "версия приложения")
    Контекст.ДоступныеФлагиПриложения.Вставить(ФлагиПриложения.ВЕРСИЯ, ФлагВерсия)

    знч ФлагСправка = новый ОписаниеФлагаПриложения(
        ФлагиПриложения.СПРАВКА,
        ФЛАГ_СПРАВКА_ПОЛНАЯ, 
        ФЛАГ_СПРАВКА, 
        "вывести справку")
    Контекст.ДоступныеФлагиПриложения.Вставить(ФлагиПриложения.СПРАВКА, ФлагСправка)

    знч ФлагНижнийРегистр = новый ОписаниеФлагаПриложения(
        ФлагиПриложения.ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР,
        ФЛАГ_ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР_ПОЛНАЯ, 
        ФЛАГ_ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР, 
        "сгенерировать пароль, используя символы в нижнем регистре")
    Контекст.ДоступныеФлагиПриложения.Вставить(
        ФлагиПриложения.ВКЛЮЧАТЬ_НИЖНИЙ_РЕГИСТР, 
        ФлагНижнийРегистр)

    знч ФлагЦифры = новый ОписаниеФлагаПриложения(
        ФлагиПриложения.ВКЛЮЧАТЬ_ЦИФРЫ,
        ФЛАГ_ВКЛЮЧАТЬ_ЦИФРЫ_ПОЛНАЯ, 
        ФЛАГ_ВКЛЮЧАТЬ_ЦИФРЫ, 
        "сгенерировать пароль, используя цифры")
    Контекст.ДоступныеФлагиПриложения.Вставить(
        ФлагиПриложения.ВКЛЮЧАТЬ_ЦИФРЫ, 
        ФлагЦифры)

    знч ФлагСпецСимволы = новый ОписаниеФлагаПриложения(
        ФлагиПриложения.ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ,
        ФЛАГ_ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ_ПОЛНАЯ, 
        ФЛАГ_ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ, 
        "сгенерировать пароль, используя спец символы: %АЛФАВИТ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ")
    Контекст.ДоступныеФлагиПриложения.Вставить(
        ФлагиПриложения.ВКЛЮЧАТЬ_СПЕЦИАЛЬНЫЕ_СИМВОЛЫ, 
        ФлагСпецСимволы)
;

метод ПроверитьФлагиНаСуществование(Контекст: КонтекстСкрипта)
    пер НеизвестныеФлаги: Массив<Строка> = [] 

    для Флаг из Контекст.Флаги
        пер ФлагИзвестен = Ложь
        для ИзвестныйФлаг из Контекст.ДоступныеФлагиПриложения
            если ФлагУстановлен(Флаг, ИзвестныйФлаг.Значение)
                ФлагИзвестен = Истина    
            ;
        ;

        если не ФлагИзвестен
            НеизвестныеФлаги.Добавить(Флаг)
        ;
    ;

    если не НеизвестныеФлаги.Пусто()
        знч НеизвестныеФлагиСтрокой = Строки.Соединить(НеизвестныеФлаги, ",")
        выбросить новый ОшибкаРазбораАргументовКоманднойСтроки(
            "Неизвестные флаги \"%НеизвестныеФлагиСтрокой\". Выполнение приложения невозможно.")
    ;
;

метод ФлагУстановлен(Аргументы: Массив<Строка>, Флаг: ОписаниеФлагаПриложения): Булево
    возврат Аргументы.Найти("--" + Флаг.Имя) != Неопределено 
        или Аргументы.Найти("-" + Флаг.КраткоеИмя) != Неопределено
;

метод ФлагУстановлен(Аргумент: Строка, Флаг: ОписаниеФлагаПриложения): Булево
    возврат Аргумент.Сравнить("--" + Флаг.Имя) == 0 
        или Аргумент.Сравнить("-" +Флаг.КраткоеИмя) == 0 
;

метод ВывестиВКонсольСправку(Контекст: КонтекстСкрипта)
    знч ОТСТУП = "    "
    знч ИМЯ_АРГУМЕНТА_ДЛИНА_ПАРОЛЯ = "длина-пароля"
    знч МаксимальнаяДлинаИменФлагов = МаксимальнаяДлинаИменФлагов(Контекст.ДоступныеФлагиПриложения)

    Консоль.Записать("")
    Консоль.Записать("Приложение: " + ИМЯ_ПРИЛОЖЕНИЯ)
    Консоль.Записать(ОПИСАНИЕ_ПРИЛОЖЕНИЯ)
    Консоль.Записать("")

    Консоль.Записать("ИСПОЛЬЗОВАНИЕ:")
    Консоль.Записать("%ОТСТУП x-genpass [ФЛАГИ] [%ИМЯ_АРГУМЕНТА_ДЛИНА_ПАРОЛЯ]")
    Консоль.Записать("")

    Консоль.Записать("ФЛАГИ:")
    для КлючЗначениеФлага из Контекст.ДоступныеФлагиПриложения

        знч ИменаФлага = ПредставлениеИменФлага(КлючЗначениеФлага.Значение)
        знч ТекущийОтступДоМаксимумаИмен = МаксимальнаяДлинаИменФлагов - ИменаФлага.Длина()

        пер Строка = "%ОТСТУП " 
            + ИменаФлага + Строки.Повторить(" ", ТекущийОтступДоМаксимумаИмен)
            + "%ОТСТУП" + КлючЗначениеФлага.Значение.Описание 
        Консоль.Записать(Строка)
    ;

    Консоль.Записать("")
    Консоль.Записать("АРГУМЕНТЫ:")
    Консоль.Записать("%ОТСТУП <%ИМЯ_АРГУМЕНТА_ДЛИНА_ПАРОЛЯ>%ОТСТУП длина сгенерированного пароля [по умолчанию: %ДЛИНА_ПАРОЛЯ_ПО_УМОЛЧАНИЮ]")
;

метод МаксимальнаяДлинаИменФлагов(Флаги: Соответствие<ФлагиПриложения, ОписаниеФлагаПриложения>): Число
    пер Результат = 0

    для КлючЗначение из Флаги
        знч Длина = ПредставлениеИменФлага(КлючЗначение.Значение).Длина()
        Результат = Макс(Результат, Длина)
    ;

    возврат Результат
;

метод ПредставлениеИменФлага(Флаг: ОписаниеФлагаПриложения): Строка
    возврат "-" + Флаг.КраткоеИмя + ", --" + Флаг.Имя
;
